From c6f095ba7ff80d831e4eabc1f216cf159c23f150 Mon Sep 17 00:00:00 2001
From: TheWhisp <daavis.90@gmail.com>
Date: Sun, 27 Oct 2013 21:25:46 +0200
Subject: [PATCH] qcom-fm-audio-add-support-for-mr1-based-fm-feature

Change-Id: I170d7932bf7762e1314edda074665f06375ae41b
---
 core/java/android/content/Intent.java              | 25 +++++++++
 core/java/android/provider/Settings.java           | 17 +++++-
 core/java/android/view/VolumePanel.java            | 12 ++++
 media/java/android/media/AudioManager.java         | 18 +++++-
 media/java/android/media/AudioService.java         | 64 ++++++++++++++++++++--
 media/java/android/media/AudioSystem.java          |  5 +-
 .../android/providers/settings/DatabaseHelper.java |  2 +
 .../internal/policy/impl/PhoneWindowManager.java   | 19 ++++++-
 .../policy/impl/keyguard/KeyguardViewBase.java     |  9 +++
 9 files changed, 162 insertions(+), 9 deletions(-)

diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java
index 99e899a..5836d66 100644
--- a/core/java/android/content/Intent.java
+++ b/core/java/android/content/Intent.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
  * This code has been modified.  Portions copyright (C) 2010, T-Mobile USA, Inc.
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -2177,6 +2178,30 @@ public class Intent implements Parcelable, Cloneable {
             "android.intent.action.HEADSET_PLUG";
 
     /**
+     * Intents indicating the FM Rx switching on or off
+     * <p>The intent will have the following extra values:
+     * <ul>
+     *   <li><em>state</em> - 0 for switched off, 1 for switched on. </li>
+     * </ul>
+     * </ul>
+     * @hide
+     */
+    public static final String ACTION_FM =
+            "qualcomm.intent.action.FM";
+
+    /**
+     * Intents indicating the FM Tx switching on or off
+     * <p>The intent will have the following extra values:
+     * <ul>
+     *   <li><em>state</em> - 0 for switched off, 1 for switched on. </li>
+     * </ul>
+     * </ul>
+     * @hide
+     */
+    public static final String ACTION_FM_TX =
+            "qualcomm.intent.action.FMTX";
+
+    /**
      * Broadcast Action: WiFi Display audio is enabled or disabled
      *
      * <p>The intent will have the following extra values:
diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index 099593b..40fc380 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -1930,6 +1930,18 @@ public final class Settings {
         public static final String VOLUME_MUSIC = "volume_music";
 
         /**
+         * FM volume (float in the range 0.0f to 1.0f).
+         * @hide
+         */
+        public static final String VOLUME_FM = "volume_fm";
+
+        /**
+         * Dummy string. Dummy string for padding
+         * @hide
+         */
+        public static final String DUMMY_STRING_FOR_PADDING = "";
+
+        /**
          * Alarm volume. This is used internally, changing this
          * value will not change the volume. See AudioManager.
          */
@@ -2070,7 +2082,9 @@ public final class Settings {
          */
         public static final String[] VOLUME_SETTINGS = {
             VOLUME_VOICE, VOLUME_SYSTEM, VOLUME_RING, VOLUME_MUSIC,
-            VOLUME_ALARM, VOLUME_NOTIFICATION, VOLUME_BLUETOOTH_SCO
+            VOLUME_ALARM, VOLUME_NOTIFICATION, VOLUME_BLUETOOTH_SCO,
+            DUMMY_STRING_FOR_PADDING,DUMMY_STRING_FOR_PADDING,
+            DUMMY_STRING_FOR_PADDING,DUMMY_STRING_FOR_PADDING,VOLUME_FM
         };
 
         /**
@@ -3330,6 +3344,7 @@ public final class Settings {
             VOLUME_SYSTEM,
             VOLUME_RING,
             VOLUME_MUSIC,
+            VOLUME_FM,
             VOLUME_ALARM,
             VOLUME_NOTIFICATION,
             VOLUME_BLUETOOTH_SCO,
diff --git a/core/java/android/view/VolumePanel.java b/core/java/android/view/VolumePanel.java
index 063f4d5..b66e5f9 100644
--- a/core/java/android/view/VolumePanel.java
+++ b/core/java/android/view/VolumePanel.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -169,6 +170,11 @@ public class VolumePanel extends Handler implements OnSeekBarChangeListener, Vie
                 R.drawable.ic_audio_notification,
                 R.drawable.ic_audio_notification_mute,
                 true),
+        FMStream(AudioManager.STREAM_FM,
+                R.string.volume_icon_description_media,
+                R.drawable.ic_audio_vol,
+                R.drawable.ic_audio_vol_mute,
+                true),
         // for now, use media resources for master volume
         MasterStream(STREAM_MASTER,
                 R.string.volume_icon_description_media, //FIXME should have its own description
@@ -205,6 +211,7 @@ public class VolumePanel extends Handler implements OnSeekBarChangeListener, Vie
         StreamResources.MediaStream,
         StreamResources.NotificationStream,
         StreamResources.AlarmStream,
+        StreamResources.FMStream,
         StreamResources.MasterStream,
         StreamResources.RemoteStream
     };
@@ -754,6 +761,11 @@ public class VolumePanel extends Handler implements OnSeekBarChangeListener, Vie
                 break;
             }
 
+            case AudioManager.STREAM_FM: {
+                setMusicIcon(R.drawable.ic_audio_vol, R.drawable.ic_audio_vol_mute);
+                break;
+            }
+
             case AudioManager.STREAM_VOICE_CALL: {
                 /*
                  * For in-call voice call volume, there is no inaudible volume.
diff --git a/media/java/android/media/AudioManager.java b/media/java/android/media/AudioManager.java
index 4213af1..bf48d3c 100644
--- a/media/java/android/media/AudioManager.java
+++ b/media/java/android/media/AudioManager.java
@@ -3,6 +3,7 @@
  * Not a Contribution.
  *
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -224,6 +225,8 @@ public class AudioManager {
     public static final int STREAM_TTS = AudioSystem.STREAM_TTS;
     /** @hide The audio stream for incall music delivery */
     public static final int STREAM_INCALL_MUSIC = AudioSystem.STREAM_INCALL_MUSIC;
+    /** @hide The audio stream for FM Radio (FM) */
+    public static final int STREAM_FM = AudioSystem.STREAM_FM;
     /** Number of audio streams */
     /**
      * @deprecated Use AudioSystem.getNumStreamTypes() instead
@@ -243,7 +246,8 @@ public class AudioManager {
         7,  // STREAM_SYSTEM_ENFORCED
         11, // STREAM_DTMF
         11, // STREAM_TTS
-        4   // STREAM_INCALL_MUSIC
+        4,   // STREAM_INCALL_MUSIC
+        11  // STREAM_FM
     };
 
     /**
@@ -1607,6 +1611,16 @@ public class AudioManager {
         return -1;
     }
 
+     /**
+      * Checks whether FM stream is active.
+      *
+      * @return true if FM is active.
+      * @hide
+      */
+    public boolean isFMActive() {
+        return AudioSystem.isStreamActive(STREAM_FM, 0);
+    }
+
     /**
      * Checks whether any music is active.
      *
@@ -1643,7 +1657,7 @@ public class AudioManager {
      * Note: only AudioManager.STREAM_MUSIC is supported at the moment
      */
     public void adjustLocalOrRemoteStreamVolume(int streamType, int direction) {
-        if (streamType != STREAM_MUSIC) {
+        if (streamType != STREAM_MUSIC && streamType != STREAM_FM) {
             Log.w(TAG, "adjustLocalOrRemoteStreamVolume() doesn't support stream " + streamType);
         }
         IAudioService service = getService();
diff --git a/media/java/android/media/AudioService.java b/media/java/android/media/AudioService.java
index ab376c2..0203f09 100644
--- a/media/java/android/media/AudioService.java
+++ b/media/java/android/media/AudioService.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -228,7 +229,9 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         15, // STREAM_BLUETOOTH_SCO
         7,  // STREAM_SYSTEM_ENFORCED
         15, // STREAM_DTMF
-        15  // STREAM_TTS
+        15, // STREAM_TTS
+        15, // STREAM_INCALL_MUSIC
+        15  // STREAM_FM
     };
     /* mStreamVolumeAlias[] indicates for each stream if it uses the volume settings
      * of another stream: This avoids multiplying the volume settings for hidden
@@ -248,7 +251,9 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         AudioSystem.STREAM_BLUETOOTH_SCO,   // STREAM_BLUETOOTH_SCO
         AudioSystem.STREAM_RING,            // STREAM_SYSTEM_ENFORCED
         AudioSystem.STREAM_RING,            // STREAM_DTMF
-        AudioSystem.STREAM_MUSIC            // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,           // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,           // STREAM_INCALL_MUSIC
+        AudioSystem.STREAM_FM
     };
     private final int[] STREAM_VOLUME_ALIAS_NON_VOICE = new int[] {
         AudioSystem.STREAM_VOICE_CALL,      // STREAM_VOICE_CALL
@@ -260,7 +265,9 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         AudioSystem.STREAM_BLUETOOTH_SCO,   // STREAM_BLUETOOTH_SCO
         AudioSystem.STREAM_MUSIC,           // STREAM_SYSTEM_ENFORCED
         AudioSystem.STREAM_MUSIC,           // STREAM_DTMF
-        AudioSystem.STREAM_MUSIC            // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,           // STREAM_TTS
+        AudioSystem.STREAM_MUSIC,           // STREAM_INCALL_MUSIC
+        AudioSystem.STREAM_FM
     };
     private int[] mStreamVolumeAlias;
 
@@ -277,7 +284,9 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
             "STREAM_BLUETOOTH_SCO",
             "STREAM_SYSTEM_ENFORCED",
             "STREAM_DTMF",
-            "STREAM_TTS"
+            "STREAM_TTS",
+            "STREAM_INCALL_MUSIC",
+            "STREAM_FM"
     };
 
     private boolean mLinkNotificationWithVolume;
@@ -541,6 +550,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
         }
         intentFilter.addAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED);
         intentFilter.addAction(Intent.ACTION_DOCK_EVENT);
+        intentFilter.addAction(Intent.ACTION_FM);
+        intentFilter.addAction(Intent.ACTION_FM_TX);
         intentFilter.addAction(Intent.ACTION_USB_AUDIO_ACCESSORY_PLUG);
         intentFilter.addAction(Intent.ACTION_USB_AUDIO_DEVICE_PLUG);
         intentFilter.addAction(Intent.ACTION_BOOT_COMPLETED);
@@ -813,6 +824,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
                  (1 << AudioSystem.STREAM_RING)|
                  (1 << AudioSystem.STREAM_SYSTEM)),
                  UserHandle.USER_CURRENT);
+        //Add STREAM_FM in mMuteAffectedStreams
+        mMuteAffectedStreams |= (1 << AudioSystem.STREAM_FM);
 
         boolean masterMute = System.getIntForUser(cr, System.VOLUME_MASTER_MUTE,
                                                   0, UserHandle.USER_CURRENT) == 1;
@@ -857,6 +870,8 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
             adjustRemoteVolume(AudioSystem.STREAM_MUSIC, direction, 0);
         } else if (AudioSystem.isStreamActive(AudioSystem.STREAM_MUSIC, 0)) {
             adjustStreamVolume(AudioSystem.STREAM_MUSIC, direction, 0);
+        } else if (AudioSystem.isStreamActive(AudioSystem.STREAM_FM, 0)) {
+            adjustStreamVolume(AudioSystem.STREAM_FM, direction, 0);
         }
     }
 
@@ -2660,6 +2675,10 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
                     if (DEBUG_VOL)
                         Log.v(TAG, "getActiveStreamType: Forcing STREAM_MUSIC stream active");
                     return AudioSystem.STREAM_MUSIC;
+                } else if (AudioSystem.isStreamActive(AudioSystem.STREAM_FM, 0)) {
+                    if (DEBUG_VOL)
+                        Log.v(TAG, "getActiveStreamType: Forcing STREAM_FM...");
+                    return AudioSystem.STREAM_FM;
                 } else {
                     if (mVolumeKeysControlRingStream) {
                         if (DEBUG_VOL)
@@ -2675,6 +2694,10 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
                 if (DEBUG_VOL)
                     Log.v(TAG, "getActiveStreamType: Forcing STREAM_MUSIC stream active");
                 return AudioSystem.STREAM_MUSIC;
+            } else if (AudioSystem.isStreamActive(AudioSystem.STREAM_FM, 0)) {
+                if (DEBUG_VOL)
+                    Log.v(TAG, "getActiveStreamType: Forcing STREAM_FM...");
+                return AudioSystem.STREAM_FM;
             } else {
                 if (DEBUG_VOL) Log.v(TAG, "getActiveStreamType: Returning suggested type "
                         + suggestedStreamType);
@@ -2779,6 +2802,10 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
             // selection if not the speaker.
             if ((device & AudioSystem.DEVICE_OUT_SPEAKER) != 0) {
                 device = AudioSystem.DEVICE_OUT_SPEAKER;
+            } else if ((device & AudioSystem.DEVICE_OUT_WIRED_HEADSET) != 0) {
+                device = AudioSystem.DEVICE_OUT_WIRED_HEADSET;
+            } else if ((device & AudioSystem.DEVICE_OUT_WIRED_HEADPHONE) != 0) {
+                device = AudioSystem.DEVICE_OUT_WIRED_HEADPHONE;
             } else {
                 device &= AudioSystem.DEVICE_OUT_ALL_A2DP;
             }
@@ -4269,6 +4296,35 @@ public class AudioService extends IAudioService.Stub implements OnFinished {
                 if (packageName != null) {
                     cleanupMediaButtonReceiverForPackage(packageName, false);
                 }
+            } else if (action.equals(Intent.ACTION_FM)){
+               Log.v(TAG, "FM Intent received");
+               state = intent.getIntExtra("state", 0);
+               if(state == 1){
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM,
+                            AudioSystem.DEVICE_STATE_AVAILABLE,
+                            "");
+                    mConnectedDevices.put( new Integer(AudioSystem.DEVICE_OUT_FM), "");
+                }else if(state == 0){
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM,
+                            AudioSystem.DEVICE_STATE_UNAVAILABLE,
+                            "");
+                    mConnectedDevices.remove(AudioSystem.DEVICE_OUT_FM);
+                }
+            }else if (action.equals(Intent.ACTION_FM_TX)){
+               state = intent.getIntExtra("state", 0);
+               Log.v(TAG, "FM Tx Intent received "+state);
+               boolean isConnected = mConnectedDevices.containsKey(AudioSystem.DEVICE_OUT_FM_TX);
+               if(state == 1 && !isConnected){
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM_TX,
+                            AudioSystem.DEVICE_STATE_AVAILABLE,
+                            "");
+                    mConnectedDevices.put( new Integer(AudioSystem.DEVICE_OUT_FM_TX), "");
+                }else if(state == 0 && isConnected){
+                    AudioSystem.setDeviceConnectionState(AudioSystem.DEVICE_OUT_FM_TX,
+                            AudioSystem.DEVICE_STATE_UNAVAILABLE,
+                            "");
+                    mConnectedDevices.remove(AudioSystem.DEVICE_OUT_FM_TX);
+                }
             } else if (action.equals(Intent.ACTION_SCREEN_ON)) {
                 AudioSystem.setParameters("screen_state=on");
             } else if (action.equals(Intent.ACTION_SCREEN_OFF)) {
diff --git a/media/java/android/media/AudioSystem.java b/media/java/android/media/AudioSystem.java
index 3a6c0af..9593982 100644
--- a/media/java/android/media/AudioSystem.java
+++ b/media/java/android/media/AudioSystem.java
@@ -3,6 +3,7 @@
  * Not a Contribution.
  *
  * Copyright (C) 2006 The Android Open Source Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,13 +58,15 @@ public class AudioSystem
     public static final int STREAM_TTS = 9;
     /* @hide The audio stream for incall music delivery */
     public static final int STREAM_INCALL_MUSIC = 10;
+    /* @hide The audio stream for FM */
+    public static final int STREAM_FM = 11;
     /**
      * @deprecated Use {@link #numStreamTypes() instead}
      */
     public static final int NUM_STREAMS = 5;
 
     // Expose only the getter method publicly so we can change it in the future
-    private static final int NUM_STREAM_TYPES = 10;
+    private static final int NUM_STREAM_TYPES = 12;
     public static final int getNumStreamTypes() { return NUM_STREAM_TYPES; }
 
     /*
diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
index 75f25f4..fc576cc 100644
--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java
@@ -1882,6 +1882,8 @@ public class DatabaseHelper extends SQLiteOpenHelper {
 
             loadSetting(stmt, Settings.System.VOLUME_MUSIC,
                     AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_MUSIC]);
+            loadSetting(stmt, Settings.System.VOLUME_FM,
+                    AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_FM]);
             loadSetting(stmt, Settings.System.VOLUME_RING,
                     AudioManager.DEFAULT_STREAM_VOLUME[AudioManager.STREAM_RING]);
             loadSetting(stmt, Settings.System.VOLUME_SYSTEM,
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 755fab3..21e7ec3 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -1,6 +1,7 @@
 /*
  * Copyright (C) 2008 The Android Open Source Project
  * Copyright (C) 2012-2013 The CyanogenMod Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -4033,6 +4034,18 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     }
 
     /**
+    * @return Whether FM is being played right now.
+    */
+    boolean isFMActive() {
+        final AudioManager am = (AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
+        if (am == null) {
+            Log.w(TAG, "isFMActive: couldn't get AudioManager reference");
+            return false;
+        }
+        return am.isFMActive();
+    }
+
+    /**
      * Tell the audio service to adjust the volume appropriate to the event.
      * @param keycode
      */
@@ -4330,8 +4343,12 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                             Log.w(TAG, "ITelephony threw RemoteException", ex);
                         }
                     }
+
                 }
-                if (isMusicActive() && (result & ACTION_PASS_TO_USER) == 0) {
+                if (isFMActive() && (result & ACTION_PASS_TO_USER) == 0) {
+                    handleVolumeKey(AudioManager.STREAM_FM, keyCode);
+                    break;
+                } else if (isMusicActive() && (result & ACTION_PASS_TO_USER) == 0) {
                     if (mVolBtnMusicControls && down && (keyCode != KeyEvent.KEYCODE_VOLUME_MUTE)) {
                         mIsLongPress = false;
                         int newKeyCode = event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP ?
diff --git a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewBase.java b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewBase.java
index cc88283..cb943bc 100644
--- a/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewBase.java
+++ b/policy/src/com/android/internal/policy/impl/keyguard/KeyguardViewBase.java
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2007 The Android Open Source Project
+ * Copyright (c) 2013, The Linux Foundation. All rights reserved.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -199,12 +200,20 @@ public abstract class KeyguardViewBase extends FrameLayout {
                             }
                         }
                         // Volume buttons should only function for music (local or remote).
+                        if (mAudioManager.isMusicActive()) {
                         // TODO: Actually handle MUTE.
                         mAudioManager.adjustLocalOrRemoteStreamVolume(
                                 AudioManager.STREAM_MUSIC,
                                 keyCode == KeyEvent.KEYCODE_VOLUME_UP
                                         ? AudioManager.ADJUST_RAISE
                                         : AudioManager.ADJUST_LOWER);
+                        } else if (mAudioManager.isFMActive()) {
+                        mAudioManager.adjustLocalOrRemoteStreamVolume(
+                                 AudioManager.STREAM_FM,
+                                 keyCode == KeyEvent.KEYCODE_VOLUME_UP
+                                         ? AudioManager.ADJUST_RAISE
+                                         : AudioManager.ADJUST_LOWER);
+                        }
                         // Don't execute default volume behavior
                         return true;
                     } else {
-- 
1.8.1.2
